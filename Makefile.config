# Make sure we're using bash
SHELL := /usr/bin/env bash

VENDOR ?= $(shell whoami)
DOCKER_REPO ?= $(notdir $(basename $(CURDIR)))

# https://explainshell.com/explain?cmd=set+-euo%20pipefail
.SHELLFLAGS := -euo pipefail -c

.DELETE_ON_ERROR:
.SUFFIXES:

JOBS_FLAG := -j
PARALLEL = $(findstring $(JOBS_FLAG),$(firstword -$(MAKEFLAGS)))$(filter $(JOBS_FLAG),$(MAKEFLAGS))
INTERACTIVE := $(shell [ -t 0 ] && echo 1)
ANSI := $(shell test $$(tput colors) -ge 8 && echo 1)

ENV ?= dev
PRODUCTION = $(if $(findstring prod,$(ENV)),1)

# Define docker-compose filename
_DC := docker-compose.yml
DC ?= $(_DC)

# Define appropriate docker-compose command
COMPOSE := docker-compose
ifneq ($(DC),$(_DC))
COMPOSE += -f $(DC)
endif

# How to tidy up docker-compose images
_RMI := all local
RMI_FLAG = $(if $(filter $(RMI),$(_RMI)),$(RMI),$(lastword $(_RMI)))

# Name and port of default service
APP ?= app
PORT ?= 80

# todo: also need to check for INTERACTIVE not 1
RUN = docker run --rm $(if not $(PARALLEL),-it)
CONSOLE ?= docker-compose \
	$(if not $(PARALLEL),--no-ansi) \
	exec \
	--user $$(id -u):$$(id -g) \
	$(APP) bin/console

COMPOSER_IMAGE ?= composer
COMPOSER ?= $(RUN) \
	--volume $$PWD:/app \
	\
	--env COMPOSER_HOME=/.composer \
	--volume ~/.composer:/.composer \
	\
	--user $$(id -u):$$(id -g) \
	--volume /etc/passwd:/etc/passwd:ro \
	--volume /etc/group:/etc/group:ro \
	\
	--volume $$SSH_AUTH_SOCK:/ssh-auth.sock \
	--env SSH_AUTH_SOCK=/ssh-auth.sock \
	\
	$(COMPOSER_IMAGE)

NPM_IMAGE ?= node:alpine

# Requires the first pre-requisite to be the fake passwd file for npm
NPM ?= $(RUN) \
		--volume $$PWD:/var/www \
		--workdir /var/www \
		\
		--user $$(id -u):$$(id -g) \
		--volume $<:/etc/passwd \
    	--volume $(<D):/home/node \
    	\
		$(NPM_IMAGE) \
		\
		npm

# Paths
CONFIG := config
PUBLIC := public


ifdef ANSI
STYLE__COLOR_red=31
STYLE__COLOR_green=32
STYLE__COLOR_yellow=33
STYLE__COLOR_blue=34
STYLE__COLOR_purple=35
STYLE__COLOR_cyan=36
STYLE__COLOR_lightgray=37
STYLE__COLOR_lightblue=94

STYLE_reset:=\033[0m

STYLE__ALL_COLORS=red \
	green \
	yellow \
	blue \
	purple \
	cyan \
	lightgray \
	lightblue

STYLE_normal=00
STYLE_bold=01
STYLE_faint=02
STYLE_italic=03
STYLE_underline=04

STYLE__ALL_STYLES=normal \
	bold \
	faint \
	italic \
	underline

# Some magic to declare `STYLE_color_style` variants programatically
__:=$(foreach color,$(STYLE__ALL_COLORS), \
	$(foreach style,$(STYLE__ALL_STYLES), \
		ifeq ($(style),normal) \
			$(eval STYLE_$(color)=\033[$(STYLE_normal);$(STYLE__COLOR_$(color))m) \
		else \
			$(eval STYLE_$(color)_$(style)=\033[$(STYLE_$(style));$(STYLE__COLOR_$(color))m) \
		endif \
	;) \
;)

STYLE_success=$(STYLE_green)
STYLE_info=$(STYLE_yellow)
STYLE_error=$(STYLE_red)
endif

define style #(text,style)
@printf "$(2)%s$(STYLE_reset)\n" $(1)
endef
